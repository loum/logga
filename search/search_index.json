{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Logga","text":"<p><code>logga</code> wraps the standard Python logging module and abstracts some of the messy parts. <code>logging</code> itself is similar to (possibly even motivated by) the log4j project. Most importantly, <code>logging</code> guarantees a singleton object that can be used throughout your project.</p> <p>Other useful links:</p> <ul> <li>logging.config \u2014 Logging configuration</li> <li>Logging Cookbook</li> </ul>"},{"location":"#simplest-usage-console","title":"Simplest Usage (Console)","text":"<p>Note</p> <p>Behind the scenes, the <code>logga</code> log handler object is instantiated through the module-level function <code>logging.getLogger(name)</code>. Multiple calls to <code>getLogger()</code> with the same name will always return a reference to the same logger object.</p> <p><code>name</code> is defined as the highest level Python calling module. For example, in the Module usage sample below, <code>name</code> will be <code>you_beaut.py</code>. For normal console-based output, name would be <code>&lt;stdin&gt;</code>.</p> <p>The following example demonstrates console-based usage that writes to <code>STDOUT</code> from within the Python interpreter:</p> Logga from the Python interpreter<pre><code>&gt;&gt;&gt; from logga import log, set_log_level\n&gt;&gt;&gt; log.info(\"This is an INFO level log\")\n2023-01-08 22:56:56 logga [INFO]: This is an INFO level log\n</code></pre> <p><code>logga</code> provides a default logger for you. This defaults to the log level <code>INFO</code>. You can set the log level with the <code>set_log_level</code> function:</p> Change log level to WARNING. DEBUG is suppressed.<pre><code>&gt;&gt;&gt; set_log_level(\"WARNING\")\n&gt;&gt;&gt; log.debug(\"This is a DEBUG level log\")\n&gt;&gt;&gt;\n</code></pre> Change log level to DEBUG. DEBUG is displayed.<pre><code>&gt;&gt;&gt; set_log_level(\"DEBUG\")\n&gt;&gt;&gt; log.debug(\"This is a DEBUG level log\")\n&gt;&gt;&gt; 2023-01-08 23:03:13 logga [DEBUG]: This is a DEBUG level log\n</code></pre>"},{"location":"#module-usage","title":"Module usage","text":"<p>Logging from your <code>*.py</code> is probably a more useful proposition. To demonstrate, add the following code into a file called <code>you_beaut.py</code>:</p> you_beaut.py<pre><code>from logga import log\n\nlog.info(\"Log from inside my Python module\")\n</code></pre> <p>To execute:</p> <pre><code>python you_beaut.py\n</code></pre> you_beaut.py logs<pre><code>2023-01-08 23:20:14 logga [INFO]: Log from inside my Python module\n</code></pre> <p>But what if you want to log to a file? In this case you will have to provide configuration. The structure of the config is standard <code>logging</code>. For example, place the following configuration into a file called <code>log.conf</code> in the same directory as <code>you_beaut.py</code>:</p> Sample log.conf<pre><code>[loggers]\nkeys=root,you_beaut.py,console\n\n[handlers]\nkeys=youBeautFileHandler,consoleHandler\n\n[formatters]\nkeys=simpleFormatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler\n\n[logger_console]\nlevel=DEBUG\nhandlers=consoleHandler\nqualname=console\npropagate=0\n[logger_you_beaut.py]\nlevel=DEBUG\nqualname=you_beaut.py\nhandlers=youBeautFileHandler\n\n[handler_youBeautFileHandler]\nclass=handlers.TimedRotatingFileHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(os.path.join(os.sep, \"var\", \"tmp\", \"you_beaut.log\"), \"midnight\")\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(sys.stdout, )\n[formatter_simpleFormatter]\nformat=%(asctime)s (%(levelname)s): %(message)s\ndatefmt=\n</code></pre> <p>Now, when you <code>python you_beaut.py</code> you will notice that output to the console is suppressed. Instead, the output is directed to a file stream defined by the <code>handler_youBeautFileHandler</code> section from the <code>log.conf</code> file. To verify:</p> <pre><code>cat /var/tmp/you_beaut.log\n</code></pre> File-based logging output<pre><code>2023-01-08 23:23:57,361 (INFO): Log from inside my Python module\n</code></pre>"},{"location":"functions/","title":"Functions","text":"<p>Custom logger based on content from Logging Cookbook.</p> <p>Configuration file for the logging module can be provided in the following locations:</p> <ul> <li>A place named by the environment variable <code>LOGGA_CONF</code></li> <li>Current directory: <code>./log.conf</code></li> <li>User's home directory: <code>~$USER/log.conf</code></li> </ul> <p>If not found, fallback is Logga's own configuration.</p> <p>This arrangement is analogous to \"rc\" files. for example, \"bashrc\", \"vimrc\", etc.</p>"},{"location":"functions/#logga.autolog","title":"<code>autolog(message)</code>","text":"<p>Automatically log the current function details.</p> <p>Used interchangeably with the <code>log</code> handler object. Handy for for verbose messaging during development by adding more verbose detail to the logging message, such as the calling function/method name and line number that raised the log call. Will only work at the <code>DEBUG</code> level:</p> <pre><code>&gt;&gt;&gt; from logga import autolog, log, set_log_level\n&gt;&gt;&gt; set_log_level(\"DEBUG\")\n&gt;&gt;&gt; autolog(\"Verbose\")\n2023-01-09 10:46:12 logga [DEBUG]: Verbose: autolog in &lt;$HOME&gt;/src/logga/__init__.py\n&gt;&gt;&gt; log.debug(\"DEBUG message\")\n2023-01-09 10:47:11 logga [DEBUG]: DEBUG message\n&gt;&gt;&gt; autolog(\"DEBUG message\")\n&gt;&gt;&gt; 2023-01-09 10:47:34 logga [DEBUG]: DEBUG message: autolog in &lt;$HOME&gt;/src/logga/__init__.py\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Text</code> <p>the log message to display</p> required Source code in <code>logga/__init__.py</code> <pre><code>def autolog(message: Text):\n\"\"\"Automatically log the current function details.\n    Used interchangeably with the `log` handler object. Handy for\n    for verbose messaging during development by adding more verbose detail\n    to the logging message, such as the calling function/method name\n    and line number that raised the log call. Will only work at the `DEBUG` level:\n    ```\n    &gt;&gt;&gt; from logga import autolog, log, set_log_level\n    &gt;&gt;&gt; set_log_level(\"DEBUG\")\n    &gt;&gt;&gt; autolog(\"Verbose\")\n    2023-01-09 10:46:12 logga [DEBUG]: Verbose: autolog in &lt;$HOME&gt;/src/logga/__init__.py\n    &gt;&gt;&gt; log.debug(\"DEBUG message\")\n    2023-01-09 10:47:11 logga [DEBUG]: DEBUG message\n    &gt;&gt;&gt; autolog(\"DEBUG message\")\n    &gt;&gt;&gt; 2023-01-09 10:47:34 logga [DEBUG]: DEBUG message: autolog in &lt;$HOME&gt;/src/logga/__init__.py\n    ```\n    Parameters:\n        message: the log message to display\n    \"\"\"\nif log.isEnabledFor(logging.DEBUG):\n# Get the previous frame in the stack.\n# Otherwise it would be this function!!!\nframe: CodeType = cast(FrameType, inspect.currentframe()).f_code\nlineno: Union[int, Any] = cast(FrameType, inspect.currentframe()).f_lineno\n# Dump the message function details to the log.\nlog.debug(\"%s: %s in %s:%i\", message, frame.co_name, frame.co_filename, lineno)\n</code></pre>"},{"location":"functions/#logga.get_logger_name","title":"<code>get_logger_name()</code>","text":"<p>Identify logger name to target handlers.</p> <p>The calling script will be the outermost call in the stack. Parse the resulting frame to get the name of the script.</p> <p><code>&lt;stdin&gt;</code> is a special case that will explicitly return <code>None</code></p> <p>Returns:</p> Type Description <code>Optional[Text]</code> <p>The logger name as a string, or <code>None</code>.</p> Source code in <code>logga/__init__.py</code> <pre><code>def get_logger_name() -&gt; Optional[Text]:\n\"\"\"Identify logger name to target handlers.\n    The calling script will be the outermost call in the stack. Parse the\n    resulting frame to get the name of the script.\n    `&lt;stdin&gt;` is a special case that will explicitly return `None`\n    Returns:\n        The logger name as a string, or `None`.\n    \"\"\"\n_name: Optional[Text] = os.path.basename(inspect.stack()[-1][1])\nif _name == \"&lt;stdin&gt;\":\n_name = None\nreturn _name\n</code></pre>"},{"location":"functions/#logga.locations","title":"<code>locations()</code>","text":"<p>Provide logging configuration directory locations in order of precedence.</p> <p>Returns:</p> Type Description <code>List[Text]</code> <p>A list of locations as a set of strings that represent the directory location of the <code>log.conf</code> file.</p> Source code in <code>logga/__init__.py</code> <pre><code>def locations() -&gt; List[Text]:\n\"\"\"Provide logging configuration directory locations in order of precedence.\n    Returns:\n        A list of locations as a set of strings that represent the directory location\n            of the `log.conf` file.\n    \"\"\"\ndef items():\nreturn (os.environ.get(\"LOGGA_CONF\"), os.getcwd(), pathlib.Path.home())\nreturn items()\n</code></pre>"},{"location":"functions/#logga.set_console","title":"<code>set_console()</code>","text":"<p>Drop back to the root logger handler. This is typically the console.</p> <p>This can be used to override the logging file output stream and send log messages to the console. For example, consider the following code that has a <code>log.conf</code> that writes to the log file <code>my.log</code>:</p> <pre><code>from logga import log, set_console\n\nset_console()\nlog.debug(\"Log from inside my Python module\")\n</code></pre> <p>The <code>set_console()</code> call will force the log message to write <code>Log from inside my Python module</code> to the console.</p> Source code in <code>logga/__init__.py</code> <pre><code>def set_console():\n\"\"\"Drop back to the root logger handler. This is typically the console.\n    This can be used to override the logging file output stream and send\n    log messages to the console. For example, consider the following\n    code that has a `log.conf` that writes to the log file `my.log`:\n    ```\n    from logga import log, set_console\n    set_console()\n    log.debug(\"Log from inside my Python module\")\n    ```\n    The `set_console()` call will force the log message to write\n    `Log from inside my Python module` to the console.\n    \"\"\"\ndef default_console_config() -&gt; logging.StreamHandler:\n\"\"\"Default console config that can be used as a fallback.\n        Returns a logging.StreamHandler configured with a simple format.\n        \"\"\"\nconsole_handler = logging.StreamHandler()\nconsole_formatter = logging.Formatter(\n\"%(asctime)s [%(levelname)s]:: %(message)s\"\n)\nconsole_handler.setFormatter(console_formatter)\nreturn console_handler\nfor hdlr in log.handlers:\nlog.removeHandler(hdlr)\nlog.propagate = False\nlog.addHandler(default_console_config())\nlog.level = logging.NOTSET\n</code></pre>"},{"location":"functions/#logga.set_log_level","title":"<code>set_log_level(level='INFO')</code>","text":"<p>Set the lower threshold of logged message level. Level defaults to `INFO``. All default log levels are supported (in order of severity):</p> <ul> <li><code>CRITICAL</code></li> <li><code>ERROR</code></li> <li><code>WARNING</code></li> <li><code>INFO</code></li> <li><code>DEBUG</code></li> <li><code>NOTSET</code></li> </ul> <p>Example:</p> <pre><code>&gt;&gt;&gt; from logga import log, set_log_level\n&gt;&gt;&gt; log.info(\"This INFO message should display\")\n2023-01-09 10:29:04 logga [INFO]: This INFO message should display\n&gt;&gt;&gt; log.debug(\"Not this DEBUG\")\n&gt;&gt;&gt; set_log_level(level=\"DEBUG\")\n&gt;&gt;&gt; log.debug(\"DEBUG is now good to go\")\n2023-01-09 10:30:15 logga [DEBUG]: DEBUG is now good to go\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>Text</code> <p>the lower log level threshold. All log levels, including and above this level in    serverity, will be logged</p> <code>'INFO'</code> Source code in <code>logga/__init__.py</code> <pre><code>def set_log_level(level: Text = \"INFO\"):\n\"\"\"Set the lower threshold of logged message level. Level defaults to `INFO``.\n    All default log levels are supported (in order of severity):\n    - `CRITICAL`\n    - `ERROR`\n    - `WARNING`\n    - `INFO`\n    - `DEBUG`\n    - `NOTSET`\n    Example:\n    ```\n    &gt;&gt;&gt; from logga import log, set_log_level\n    &gt;&gt;&gt; log.info(\"This INFO message should display\")\n    2023-01-09 10:29:04 logga [INFO]: This INFO message should display\n    &gt;&gt;&gt; log.debug(\"Not this DEBUG\")\n    &gt;&gt;&gt; set_log_level(level=\"DEBUG\")\n    &gt;&gt;&gt; log.debug(\"DEBUG is now good to go\")\n    2023-01-09 10:30:15 logga [DEBUG]: DEBUG is now good to go\n    ```\n    Parameters:\n        level: the lower log level threshold. All log levels, including and above this level in\n               serverity, will be logged\n    \"\"\"\nlevel_map = {\n\"CRITICAL\": logging.INFO,\n\"ERROR\": logging.INFO,\n\"WARNING\": logging.INFO,\n\"INFO\": logging.INFO,\n\"DEBUG\": logging.DEBUG,\n\"NOTSET\": logging.DEBUG,\n}\nlog.setLevel(level_map[level])\n</code></pre>"},{"location":"functions/#logga.source_logger_config","title":"<code>source_logger_config()</code>","text":"<p>Source logger config.</p> <p>Will attempt to parse a <code>log.conf</code> file to feed into <code>logging.config.fileConfig</code>. Will also determine the name of the calling script/module and associate that logger name with the <code>log.conf</code>.</p> <p>Returns:</p> Type Description <code>Optional[Text]</code> <p>The name of the logger. Fallback, if no <code>log.conf</code> files are found is the <code>logga</code> logger.</p> Source code in <code>logga/__init__.py</code> <pre><code>def source_logger_config() -&gt; Optional[Text]:\n\"\"\"Source logger config.\n    Will attempt to parse a `log.conf` file to feed into `logging.config.fileConfig`. Will also\n    determine the name of the calling script/module and associate that logger name with the\n    `log.conf`.\n    Returns:\n        The name of the logger. Fallback, if no `log.conf` files are found is the `logga` logger.\n    \"\"\"\nconfig_found = False\nfor loc in locations():\nif loc is None:\ncontinue\ntry:\nwith open(os.path.join(loc, \"log.conf\"), encoding=\"utf-8\") as _fh:\nlogging.config.fileConfig(_fh)\nconfig_found = True\nbreak\nexcept IOError:\n# Not a bad thing if the open failed. Just means that the log\n# source does not exist.\ncontinue\nlogger_name: Optional[Text] = get_logger_name()\nif not config_found:\nlogger_name = \"logga\"\n# If we've fallen through to here, then use Logga's own config.\nconfig_path = os.path.join(\npathlib.Path(__file__).resolve().parents[0], \"config\", \"log.conf\"\n)\nwith open(config_path, encoding=\"utf-8\") as _fh:\nlogging.config.fileConfig(_fh)\nreturn logger_name\n</code></pre>"},{"location":"functions/#logga.suppress_logging","title":"<code>suppress_logging()</code>","text":"<p>Provides an overriding (to level <code>CRITICAL</code>) suppression mechanism for all loggers which takes precedence over the logger`s own level.</p> <p>This function can be useful when the need arises to temporarily throttle logging output down across the whole application.</p> <p>Technically, this function will disable all logging calls below severity level <code>CRITICAL</code>. For example:</p> <pre><code>&gt;&gt;&gt; from logga import log, suppress_logging\n&gt;&gt;&gt; log.info(\"This INFO message should display\")\n2023-01-09 10:33:43 logga [INFO]: This INFO message should display\n&gt;&gt;&gt; suppress_logging()\n&gt;&gt;&gt; log.info(\"This INFO message should NOT display\")\n&gt;&gt;&gt; log.critical(\"But CRITICAL messages will get through\")\n2023-01-09 10:36:17 logga [CRITICAL]: But CRITICAL messages will get through\n</code></pre> Source code in <code>logga/__init__.py</code> <pre><code>def suppress_logging():\n\"\"\"Provides an overriding (to level `CRITICAL`) suppression mechanism\n    for all loggers which takes precedence over the logger`s own level.\n    This function can be useful when the need arises to temporarily throttle logging output down\n    across the whole application.\n    Technically, this function will disable all logging calls below severity level\n    `CRITICAL`. For example:\n    ```\n    &gt;&gt;&gt; from logga import log, suppress_logging\n    &gt;&gt;&gt; log.info(\"This INFO message should display\")\n    2023-01-09 10:33:43 logga [INFO]: This INFO message should display\n    &gt;&gt;&gt; suppress_logging()\n    &gt;&gt;&gt; log.info(\"This INFO message should NOT display\")\n    &gt;&gt;&gt; log.critical(\"But CRITICAL messages will get through\")\n    2023-01-09 10:36:17 logga [CRITICAL]: But CRITICAL messages will get through\n    ```\n    \"\"\"\nlogging.disable(logging.ERROR)\n</code></pre>"}]}